/*********************************

  FONT-SIZE MIXIN

  This mixin creates a fully formed type style (sizing and vertical rhythm)
  by passing in a single value, e.g:

  .foo {
    @include font-size(12px);
  }

  This will generate a rem-based font-size with its pixel fallback, as well as
  a unitless line-height which will place the element on your baseline, e.g.:

  .foo {
    font-size: 12px;
    font-size: 0.75rem;
    line-height: 2;
  }

  If you do not want the framework to generate you a line-height automatically,
  you simply pass in your own as a second paramater:

  .foo {
    @include font-size(12px, 1.5);
  }

  This will yield:

  .foo {
    font-size: 12px;
    font-size: 0.75rem;
    line-height: 1.5;
  }

  This parameter can be any integer, ‘inherit’, or ‘normal’. If you don’t want
  a line-height at all, pass in a second paramater of ‘none’ or ‘false’:

  .foo {
    @include font-size(12px, none);
  }

  This will yield:

  .foo {
    font-size: 12px;
    font-size: 0.75rem;
  }

**********************************/


@mixin font-size($font-size, $line-height: auto) {
    font-size: $font-size;
    font-size: ($font-size / $base-font-size) * 1rem;

    @if $line-height == auto {
        line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }

    @else {

        @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
            line-height: $line-height;
        }

        @elseif ($line-height != none and $line-height != false) {
            @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`."
        }

    }

}


/*********************************

  FLEX GRID (LAYOUT) MIXIN

  The following mixins will create fully-formed styles that will allow us to control
  the widths of items in our flex grid.

  For example:

  .layout--25 {
    @include layout(25%);
  }

  Will create a class, that when applied to the parent ('layout') element, that constrains it's children
  to 25% of the viewport width, and wraps the overflow.

  Like so...

  .layout--25 {
    flex-wrap: wrap;
    .layout__item {
      flex: 0 0 25%;
    }
  }

  The other mixins create a similar output, but wrapped in a media query. The 'flex-wrap: wrap'
  is ommited as it should be inherited from the base layout class. The syntax is the same as the first
  mixin. e.g:

  .\@med-layout--25 {
    @include med-layout(25%);
  }

  .\@lrg-layout--25 {
    @include lrg-layout(25%);
  }

  .\@xlrg-layout--25 {
    @include xlrg-layout(25%);
  }



**********************************/



@mixin layout($layout-item-width){
  flex-wrap: wrap;
  .layout__item {
    flex: 0 0 $layout-item-width;
  }
}


@mixin med-layout($layout-item-width){
  @include media-query(med){
    .layout__item {
      flex: 0 0 $layout-item-width;
    }
  }
}

@mixin lrg-layout($layout-item-width){
  @include media-query(lrg){
    .layout__item {
      flex: 0 0 $layout-item-width;
    }
  }
}

@mixin xlrg-layout($layout-item-width){
  @include media-query(xlrg){
    .layout__item {
      flex: 0 0 $layout-item-width;
    }
  }
}
